Демонстрация метода, сочетания алгоритма трекинга и детектора лиц. 
- Нужна простая структура проекта без лишних врапперов (для более легкого понимания кода, это же демонстрация,
 возможно больше для новичков)
- Стоит оставить только метод внешнего API, 
(что бы библиотеку можно было подключать в компилированном виде к любому проекту и так повысить узнаваемость)
- Убираем большинство проверок (кроме наличия файлов)
- все мои методы лучше реализовать в одном классе.
- SORT подключаем в виде DLL (скомпилированной из моей в версии SORT, исходник в отдельной папке)
- Итого, архитектура проекта:
1) Внешний API совместимый с C (создание, уничтожение, feed frame)
2) ф-я main, с демонстрацией запуска из внешнего API
3) 1 класс LURKDetector без наследования и враппера, методы создание детектора, detect, sort, feedframe



//Проводимые работы
1. переименовываем файлы
2. переименовываем переменные
3. оставяем конструктор классов, т.к. это безопаснее обьчвлять класс сразу вместе с инициализацией переменных, 
тогда в случае исключений точно все переменные уничтожатся, т.к. обьявляются до начала работы программы
4. virtual виртуальные функции возможно не нужны, т.к. делать новые реализации методов в дочерних классах я не собираюсь,
хотя это полиморфизм один из столпов ооп - они нужны что бы соответсвовать паттерну интерфейс, его плюсы +не надо тащить заголовки всех внутренних методов, 
а только верхнего уровня + методы защищены от копирования, т.к. из внешней программы видны только виртуальные методы, а их реализация появляется только при запуске
У себя я это убрал для простоты (работает и без этого)